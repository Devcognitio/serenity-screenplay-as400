plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin"  version "1.0.0"
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_11
group 'co.com.devco'
version '1.0.0'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation "net.serenity-bdd:serenity-cucumber:1.9.45"
    implementation "net.serenity-bdd:serenity-screenplay:2.0.81"
    implementation "us.abstracta:xtn5250:2.2"
    implementation 'com.blazemeter:dm3270-lib:0.14-lib'
    implementation "jline:jline:2.11"
    implementation "org.apache.jmeter:ApacheJMeter_core:5.4.3"
    implementation 'org.assertj:assertj-core:3.10.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    environment("testDir","test")
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

sonarqube {
    properties {
        property "sonar.projectKey","serenity-screenplay-as400"
        property 'sonar.organization','devcognitio'
        property 'sonar.host.url','https://sonarcloud.io'
        property "sonar.issuesReport.html.enable","true"
        property "sonar.issuesReport.console.enable","true"
        property "sonar.java.coveragePlugin","jacoco"
        property "sonar.jacoco.reportPath","build/jacoco/*.exec"
        property "sonar.dynamicAnalysis","reuseReports"
        property "sonar.coverage.exclusions","**/interactions/*,**/targets/*,**/exceptions/*,**/questions/*,**/utils/SSLContextFactory*"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

signing {
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'serenity-screenplay-as400'
                packaging = 'jar'
                description = 'Serenity BDD + Screenplay methods to interact to AS400 Systems'
                url = 'https://github.com/Devcognitio/serenity-screenplay-as400'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'devco'
                        name = 'Devco'
                        email = 'contacto@devco.com.co'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Devcognitio/serenity-screenplay-as400'
                    developerConnection = 'scm:git:ssh://github.com/Devcognitio/serenity-screenplay-as400.git'
                    url = 'https://github.com/Devcognitio/serenity-screenplay-as400'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }

    clientTimeout = Duration.ofSeconds(300)
    connectTimeout = Duration.ofSeconds(60)

    transitionCheckOptions {
        maxRetries.set(40)
        delayBetween.set(java.time.Duration.ofMillis(3000))
    }
}

